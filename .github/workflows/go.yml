# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  workflow_dispatch:                                                                                inputs:
      goos:
        description: 'GOOS'
        default: 'linux'
        required: true
        type: string
      goarch:
        description: 'GOARCH'
        default: 'arm'
        required: true
        type: string
      goarm:
        description: 'GOARM'
        default: '5'
        required: false                                                                                 type: string

  push:
    branches: [ "master" ]
    tags:
      - v*
  pull_request:
    branches: [ "master" ]
    tags:
      - v*

jobs:                                                                                                                                                                                             build:
    runs-on: ubuntu-latest                                                                          permissions:                                                                                      contents: write
                                                                                                    steps:                                                                                          - uses: actions/checkout@v4
                                                                                                    - name: Set up Go                                                                                 uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build                                                                                     run: GOOS="${{ inputs.goos }}" GOARCH="${{ inputs.goarch }}" GOARM="${{ inputs.goarm }}" go build -v -x -ldflags="-X main.name=ccat -X main.version=$(git describe --abbrev=0 --tags) -X main.commit=$(git rev-parse HEAD) -X main.date=$(git show -s --format=%ct HEAD) -X main.builtBy=PhateValleyman" -o ./dist/                                                                             #run: GOOS=linux GOARCH=arm GOARM=5 go build -v -x -ldflags="-X main.name=ccat -X main.version=$(git describe --abbrev=0 --tags) -X main.commit=$(git rev-parse HEAD) -X main.date=$(git show -s --format=%ct HEAD) -X main.builtBy=PhateValleyman" -o ./dist/
      #run: GOOS=android GOARCH=arm64 go build -trimpath -v -x -ldflags="-X main.name=ccat -X main.version=$(git describe --abbrev=0 --tags) -X main.commit=$(git rev-parse HEAD) -X main.date=$(git show -s --format=%ct HEAD) -X main.builtBy=PhateValleyman"
      #run: GOOS=android GOARCH=arm GOARM=7 go build -v -x -ldflags="-X main.name=ccat -X main.version=$(git describe --abbrev=0 --tags) -X main.commit=$(git rev-parse HEAD) -X main.date=$(git show -s --format=%ct HEAD) -X main.builtBy=PhateValleyman"
                                                                                                    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2                                                            with:
        tag_name: ${{ github.ref_name }}
        files: dist/*
        name: Release ${{ github.ref_name }}
        body: |
          Released by: ${{ github.actor }}
          Triggered from: ${{ github.event_name }}
